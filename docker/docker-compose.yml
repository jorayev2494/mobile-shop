version: '3.9'

x-php-cli: &php-cli
  build:
      context: ./php_cli
      dockerfile: Dockerfile
  # restart: unless-stopped
  working_dir: /var/project
  volumes:
      - ../:/var/project

x-ngx-proxy: &ngx-proxy-server
    build: 
        context: ./nginx_proxy
        dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-ngx-proxy
    restart: unless-stopped
    volumes: 
        - ../:/var/project
    depends_on: 
        - php-fpm
    links: 
        - php-fpm

services:
  # Nginx Service
  nginx:
    build:
        context: ./nginx
        dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-ngx
    restart: unless-stopped
    tty: true
    ports:
        - ${NGINX_PORT}:80
    volumes:
        - ../:/var/project:rw
    depends_on:
        - php-fpm
    links:
        - php-fpm
    networks:
        - shop-network

  ngx_proxy_imgs:
    <<: *ngx-proxy-server
    ports: 
        - 9999:8888
    networks: 
        - shop-network

  # PHP FPM Service
  php-fpm:
    build:
        context: ./php
        dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-php-fpm
    restart: unless-stopped
    extra_hosts:
        - "host.docker.internal:host-gateway"       # for Xdebug
    tty: true
    environment:
        # PHP_IDE_CONFIG: "serverName=${COMPOSE_PROJECT_NAME}-php-fpm"    # for Xdebug
        XDEBUG_MODE: debug
        XDEBUG_CONFIG: client_host=host.docker.internal client_port=9003 remote_enable=1
    expose:
        - 9000
    depends_on:
        - postgres
        # - test-postgres
    volumes:
        - ../:/var/project
        # - ./php/xdebug/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini:ro
        # - ./php/xdebug/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini:ro
        # - ./php/xdebug/logs/xdebug.log:/tmp/xdebug.log
    networks:
        - shop-network
        - test-shop-network
  
  # PHP CLI Service
  php-cli:
    <<: *php-cli
    container_name: ${COMPOSE_PROJECT_NAME}-php-cli
    restart: 'no'
    # depends_on:
        # - test-postgres
    networks:
        - shop-network
        - test-shop-network

  # Supervisor Service
  supervisor:
    build:
        context: ./supervisor
        dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-supervisor
    # command: ['php /var/project/artisan create-rabbitmq-exchanges']
    restart: unless-stopped
    volumes:
        - ../:/var/project
    ports:
        - 9898:9001
    networks:
        - shop-network
        - test-shop-network

  # Link: https://dev.to/nietzscheson/multiples-postgres-databases-in-one-service-with-docker-compose-4fdf 
  # Postgres Service
  postgres:
    image: postgres:alpine
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    restart: unless-stopped
    volumes:
        - ./postgres/multiple-databases.sh:/docker-entrypoint-initdb.d/multiple-databases.sh
        - ./postgres/data/:/var/lib/postgresql/data
    environment:
        # POSTGRES_DB: devdb
        POSTGRES_MULTIPLE_DATABASES: admindatabase, clientdatabase
        POSTGRES_USER: shopuser
        POSTGRES_PASSWORD: "shoppassword"
        PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shopuser"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: postgres -c 'max_connections=1000'
    ports:
        - ${POSTGRES_PORT}:5432
    networks:
        - shop-network

#   postgres-learn:
#     image: postgres:12
#     container_name: ${COMPOSE_PROJECT_NAME}-postgres-learn
#     restart: unless-stopped
#     volumes:
#         - ./postgres-learn/data/:/var/lib/postgresql/data
#     environment:
#         POSTGRES_DB: devdb
#         POSTGRES_USER: devuser
#         POSTGRES_PASSWORD: devsecret
#         PGDATA: /var/lib/postgresql/data/pgdata
#     # expose:
#     #     - 9000
#     ports:
#         - 5430:5432
#     networks:
#         - shop-network

  # Postgres Service
#   test-postgres:
#     image: postgres:12
#     container_name: ${COMPOSE_PROJECT_NAME}-test-postgres
#     restart: unless-stopped
#     # volumes:
#         # - ./postgres/data/:/var/lib/postgresql/data
#     environment:
#         POSTGRES_DB: testdb
#         POSTGRES_USER: testuser
#         POSTGRES_PASSWORD: testsecret
#         PGDATA: /var/lib/postgresql/data/pgdata
#     ports:
#         - ${TEST_POSTGRES_PORT}:5432
#     networks:
#         - test-shop-network

  # Mailhog Service
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ${COMPOSE_PROJECT_NAME}-mailhog
    restart: unless-stopped
    depends_on:
        - php-fpm
    ports:
        - ${MAILHOG_INTERFACE_PORT}:8025
        # - ${MAILHOG_PORT}:1025
    networks:
        - shop-network
        - test-shop-network

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3.9.1-management
    container_name: ${COMPOSE_PROJECT_NAME}-rabbitmq
    restart: unless-stopped
    ports:
      - ${RABBIT_MQ_MANAGEMENT}:15672
      - ${RABBIT_MQ_PORT}:5672
    # environment:
        # RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
        # RABBITMQ_DEFAULT_USER: guest # default: guest
        # RABBITMQ_DEFAULT_PASS: guest # default: guest
        # RABBITMQ_DEFAULT_VHOST: /
    networks:
        - test-shop-network

  admin-redoc-ui:
    image: redocly/redoc
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-admin-redoc-ui
    volumes:
        - ../docs:/usr/share/nginx/html/swagger
    ports:
      - ${REDOC_PORT}:80
    environment:
      SPEC_URL: 'swagger/admin-api-docs.yaml'
    #   PAGE_TITLE: 'Test API'
    #   PAGE_FAVICON: 'https://example.com/static/images/favicon.ico'
    #   REDOC_OPTIONS: 'disable-search hide-download-button theme={"typography":{"fontSize": "16px"}}'

  client-redoc-ui:
    image: redocly/redoc
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-client-redoc-ui
    depends_on:
        - rabbitmq
    volumes:
        - ../docs:/usr/share/nginx/html/swagger
    ports:
      - ${CLIENT_REDOC_PORT}:80
    environment:
      SPEC_URL: 'swagger/client-api-docs.yaml'
    #   PAGE_TITLE: 'Test API'
    #   PAGE_FAVICON: 'https://example.com/static/images/favicon.ico'
    #   REDOC_OPTIONS: 'disable-search hide-download-button theme={"typography":{"fontSize": "16px"}}'

  minio:
    hostname: minio
    image: minio/minio
    command: server /data --console-address :9001
    container_name: ${COMPOSE_PROJECT_NAME}-minio
    environment:
        MINIO_ROOT_USER: minio
        MINIO_ROOT_PASSWORD: minio123
    healthcheck:
        test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
        interval: 30s
        timeout: 20s
        retries: 3
    volumes:
        - ./minio/data:/data
    # expose:
    #     - 9000
    #     - 9001
    ports:
        - 9000:9000
        - 9001:9001
    networks:
        - shop-network
        - test-shop-network

#   minio-create-bucket:
#     image: minio/mc
#     container_name: ${COMPOSE_PROJECT_NAME}-minio-create-bucket
#     depends_on:
#         - minio
#     environment:
#         AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
#         AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
#         AWS_BUCKET: ${AWS_BUCKET}
#         AWS_ENDPOINT: ${AWS_ENDPOINT}
#     volumes:
#         - './docker/minio:/etc/minio'
#     # entrypoint: /etc/minio/create_bucket.sh
#     entrypoint: >
#         /usr/bin/sh -c "
#         /usr/bin/mc config host add local ${AWS_ENDPOINT} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
#         /usr/bin/mc rm -r --force local/${AWS_BUCKET};
#         /usr/bin/mc mb -p local/${AWS_BUCKET};
#         /usr/bin/mc policy set download local/${AWS_BUCKET};
#         /usr/bin/mc policy set public local/${AWS_BUCKET};
#         /usr/bin/mc anonymous set upload local/${AWS_BUCKET};
#         /usr/bin/mc anonymous set download local/${AWS_BUCKET};
#         /usr/bin/mc anonymous set public local/${AWS_BUCKET};
#         exit 0;
#         "
#     networks:
#         - test-shop-network

# Swager Service
#   swagger-ui:
#     image: swaggerapi/swagger-ui
#     container_name: ${COMPOSE_PROJECT_NAME}-swagger-ui
#     ports:
#         - ${SWAGGER_PORT}:8080
#     volumes:
#         - ../docs:/usr/share/nginx/html/doc
#     environment:
#         API_URL: doc/api-docs.yaml
#         URLS_PRIMARY_NAME: "CheckServer"
#         URLS: "[
#                     { url: 'doc/admin-api-docs.yaml', name: 'Admin'},
#                     { url: 'doc/client-api-docs.yaml', name: 'Client'},
#                 ]"
#     networks:
#         - shop-network

  adminer:
    image: adminer
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-adminer
    ports:
      - 8000:8080
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
        - shop-network

networks:
  shop-network:
      driver: bridge
  test-shop-network:
      driver: bridge
