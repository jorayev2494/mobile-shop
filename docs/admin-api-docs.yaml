openapi: 3.0.0
info:
  version: 1.0.0
  title: Mobile App Admin API
  contact:
    email: jorayev2494@gmail.com
    url: 'http://127.0.0.1:8084/contact'
  termsOfService: 'https://example.com/terms/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://cdni.iconscout.com/illustration/premium/thumb/mobile-application-development-2726415-2261413.png'
    altText: Mobile App Admin API
  description: |
    This is an **example** API to demonstrate features of the OpenAPI
    specification.

    # Introduction

    This API definition is intended to to be a good starting point for
    describing your API in [OpenAPI/Swaggerformat](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).
    It also demonstrates features of the
    [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool and
    the [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond
    the standard OpenAPI syntax, we use a few [vendor extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).

    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities
    of the service without access to source
    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: 'https://github.com/Rebilly/generator-openapi-repo'

servers:
  - description: 'Local server'
    url: 'http://127.0.0.1:8084/api/admin'

  - description: 'Global server'
    url: 'https://example.com/api/admin'

tags:
  - name: Authentication
    description: Example echo operations

  - name: Restore password
    description: Operations about users
  
  - name: Roles
    description: Permissions description

  - name: Profile
    description: This is Profile description
  
  - name: Managers
    description: Managers description

  - name: Categories
    description: Categories description

  - name: Currencies
    description: Currencies description
  
  - name: Products
    description: Products description

  - name: Orders
    description: Orders description

x-tagGroups: 
  - name: Authentication
    tags: 
      - Authentication
      - Restore password

  - name: Roles
    tags:
      - Roles
      - Permissions

  - name: Profile
    tags: 
      -  Profile

  - name: Managers
    tags: 
      -  Managers

  - name: Categories
    tags: 
      -  Categories

  - name: Currencies
    tags: 
      -  Currencies
  
  - name: Products
    tags: 
      -  Products

  - name: Orders
    tags: 
      -  Orders

security:
  - bearerAuth: []

paths:
  # Authentication
  /admin/auth/register:
    $ref: paths/admin/auth/register.yml

  /admin/auth/login:
    $ref: paths/admin/auth/login.yml

  /admin/auth/refresh-token:
    $ref: paths/admin/auth/refreshToken.yml

  /admin/auth/logout:
    $ref: paths/admin/auth/logout.yml
  # End Authentication

  # Restore password
  /admin/auth/restore-password/link:
    $ref: paths/admin/auth/restore-password/link.yml

  /admin/auth/restore-password/restore:
    $ref: paths/admin/auth/restore-password/restore.yml

  # Roles
  /admin/roles:
    $ref: paths/admin/roles/Role.yml

  /admin/roles/{id}:
    $ref: paths/admin/roles/RoleId.yml

  # Permission
  /admin/permissions:
    $ref: paths/admin/permissions/Index.yml

  # Profile
  /admin/profile:
    $ref: paths/admin/profile/Profile.yml

  /admin/profile/change-password:
    $ref: paths/admin/profile/ChangePassword.yml
  
  # Managers
  /managers:
    $ref: paths/admin/managers/Index.yml

  /managers/{uuid}:
    $ref: paths/admin/managers/ManagerUUID.yml

  # Categories
  /admin/categories:
    $ref: paths/admin/categories/GetCategory.yml
  
  /admin/categories/{uuid}:
    $ref: paths/admin/categories/Category.yml

  # Currencies
  /admin/currencies:
    $ref: paths/admin/currencies/IndexCurrency.yml

  # Products
  /admin/products:
    $ref: paths/admin/products/getProducts.yml

  /admin/products/{uuid}:
    $ref: paths/admin/products/Product.yml
  
  # Orders
  /admin/orders:
    $ref: paths/admin/orders/getOrders.yml

  /admin/orders/{uuid}:
    $ref: paths/admin/orders/Order.yml

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
